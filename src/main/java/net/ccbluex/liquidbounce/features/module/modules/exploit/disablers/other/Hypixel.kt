package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.PlayerUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.S07PacketRespawn
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import java.util.concurrent.LinkedBlockingQueue

class Hypixel : DisablerMode("Hypixel") {
    private val watchDogAntiBan = BoolValue("${valuePrefix}WatchDog_Disabler", false)
    private val noC03 = BoolValue("${valuePrefix}NoC03Packet", true)
    private val strafeDisabler = BoolValue("${valuePrefix}StrafeDisabler", true)
    private val timerA = BoolValue("${valuePrefix}Timer1", true)
    private var counter = 0
    private var x = 0.0
    private var y = 0.0
    private var z = 0.0
    private val HypixelDebug = MSTimer()
    
    //tiemr 1
    private val packets = LinkedBlockingQueue<Packet<INetHandlerPlayServer>>()
    private val timerCancelDelay = MSTimer()
    private val timerCancelTimer = MSTimer()
    private var timerShouldCancel = true
    
    override fun onWorld(event: WorldEvent) {
        counter = 0
    }

    override fun onEnable() {
        counter = 0
        x = 0.0
        y = 0.0
        z = 0.0
        HypixelDebug.reset()
        timerCancelDelay.reset()
        timerCancelTimer.reset()
    }

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        
        //timerA
        if (timerA.get()) {
            if (    packet is C03PacketPlayer || 
                    packet is C03PacketPlayer.C05PacketPlayerLook || 
                    packet is C03PacketPlayer.C06PacketPlayerPosLook || 
                    packet is C03PacketPlayer.C04PacketPlayerPosition
               ) {
                
                if (timerShouldCancel) {
                    if (!timerCancelTimer.hasTimePassed(450)) {
                        packets.add(packet as Packet<INetHandlerPlayServer>)
                        event.cancelEvent()
                    } else {
                        timerShouldCancel = false
                        while (!packets.isEmpty()) {
                            PacketUtils.sendPacketNoEvent(packets.take())
                        }
                    }
                }
            }
        }
                
        
        // noC03
        if (packet is C03PacketPlayer && !(packet is C03PacketPlayer.C05PacketPlayerLook || packet is C03PacketPlayer.C06PacketPlayerPosLook || packet is C03PacketPlayer.C04PacketPlayerPosition) && noC03.get()) {
            event.cancelEvent()
        }
        
        // strafe disabler
        if (strafeDisabler.get() && (mc.thePlayer.ticksExisted < 60) && (packet is C03PacketPlayer.C05PacketPlayerLook || packet is C03PacketPlayer.C06PacketPlayerPosLook || packet is C03PacketPlayer.C04PacketPlayerPosition)) {
            event.cancelEvent()
        }
        
        // rando sh*t
        if(!watchDogAntiBan.get()){
            if (event.packet is C03PacketPlayer.C06PacketPlayerPosLook && mc.thePlayer.onGround && mc.thePlayer.fallDistance>10) {
                if (counter > 0) {
                    if (event.packet.x == x && event.packet.y == y && event.packet.z == z) {
                        mc.netHandler.networkManager.sendPacket(
                            C03PacketPlayer.C04PacketPlayerPosition(
                                event.packet.x,
                                event.packet.y,
                                event.packet.z,
                                event.packet.onGround
                            )
                        )
                        disabler.debugMessage("Packet C04")
                        event.cancelEvent()
                    }
                }
                counter += 1

                if (event.packet is C03PacketPlayer.C05PacketPlayerLook && mc.thePlayer.isRiding) {
                    mc.netHandler.addToSendQueue(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING))
                    disabler.debugMessage("Packet C0B")
                } else if (event.packet is C0CPacketInput && mc.thePlayer.isRiding) {
                    mc.netHandler.networkManager.sendPacket(event.packet)
                    mc.netHandler.addToSendQueue(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING))
                    disabler.debugMessage("Packet C0B")
                    event.cancelEvent()
                }
            }

            if (event.packet is S08PacketPlayerPosLook) {
                val s08 = event.packet
                x = s08.x
                y = s08.y
                z = s08.z
                disabler.debugMessage("Receive S08")
            }

            if (event.packet is S07PacketRespawn) {
                counter = 0
            }
        }

    }

    override fun onUpdate(event: UpdateEvent) {
        
        if (timerA.get()) {
            if (timerCancelDelay.hasTimePassed(10000)) {
                timerShouldCancel = true
                timerCancelTimer.reset()
            }
        }
        
        
        //Hypixel Disabler C00
        if(mc.thePlayer.onGround && PlayerUtils.isBlockUnder() && mc.thePlayer.fallDistance > 10){
            mc.netHandler.addToSendQueue(C00PacketKeepAlive(RandomUtils.nextInt(0,1000)))
            disabler.debugMessage("Hypixel Disabler C00")
        }
        
        //Hypixel Disabler C0B & Hypixel Disabler C03
        if(mc.thePlayer.ticksExisted % 180 == 90){
            if(mc.thePlayer.onGround && mc.thePlayer.fallDistance > 10){
                mc.netHandler.addToSendQueue(C00PacketKeepAlive(RandomUtils.nextInt(0,1000)))
                disabler.debugMessage("Hypixel Disabler C0B")
                mc.timer.timerSpeed=0.8f;
            }else{
                if(mc.thePlayer.fallDistance<10) {
                    if (mc.thePlayer.posY == mc.thePlayer.fallDistance.toDouble()) {
                        mc.netHandler.addToSendQueue(C03PacketPlayer(false))
                        if(mc.thePlayer.onGround) mc.timer.timerSpeed = 0.4f;
                        if(mc.thePlayer.fallDistance==0f) mc.netHandler.addToSendQueue(C03PacketPlayer(true))
                        disabler.debugMessage("Hypixel Disabler C03")
                    }
                }
            }
        }
        
        
        if(mc.thePlayer.posY != 0.0){
            val times=10000 / if(mc.thePlayer.fallDistance.toLong() != 0L) mc.thePlayer.fallDistance.toLong() else 1
            if(HypixelDebug.hasTimePassed(if(times<100) 100 else times) && !mc.thePlayer.onGround && mc.thePlayer.fallDistance != 0f){
                HypixelDebug.reset()
                disabler.debugMessage("Hypixel Disabler Watchdog")
            }else{
                if(mc.thePlayer.fallDistance == 0f) HypixelDebug.reset()
            }
            if (mc.thePlayer.getItemInUseDuration() >= 1 && PlayerUtils.isUsingFood()) {
                mc.netHandler.addToSendQueue(C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem))
            }else{
                mc.netHandler.addToSendQueue(C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem))
            }
        }

    }
}
